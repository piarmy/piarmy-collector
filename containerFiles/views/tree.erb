<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>PiArmy: Collector</title>

    <!-- Bootstrap -->
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

    <style>
      .node circle {
        fill: #ccc;
        stroke: #fff;
        stroke-width: 3px;
      }

      .node text { font: 12px sans-serif; }

      .node--internal text {
        
      }

      .link {
        fill: none;
        stroke: #ccc;
        stroke-width: 2px;
      }
    </style>

  </head>
  <body>

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script
      src="http://code.jquery.com/jquery-3.2.1.min.js"
      integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
      crossorigin="anonymous"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js"></script>
    <script src="https://use.fontawesome.com/60f35cefdf.js"></script>
  </body>

  <script>

  $(document).on('DOMNodeInserted', function(e) {
    if($(e.target).html() === "Swarm"){
      //console.log($(e.target).hide());
    }
  });

$( document ).ready(function() {

  function getTreeData(nodeNames){
    $.ajax({
      url: "http://piarmy01:8000/containers/tree?callback=tree",

      // The name of the callback parameter
      jsonp: "callback",
   
      // Tell jQuery we're expecting JSONP
      dataType: "jsonp",
   
      // Work with the response
      success: function(treeLayoutData) {
        update(treeLayoutData);
      },
      error: function( error ) {
        console.log(error);
      }
    });
  }

  function update(treeLayoutData) {
    var nodeSizeYScale = 25 // Smaller is taller?
    var nodeSizeXScale = 10  // Smaller is wider?



    // append the svg object to the body of the page
    // appends a 'group' element to 'svg'
    // moves the 'group' element to the top left margin
    var width  = window.innerWidth  - 100;
    var height = window.innerHeight - 100;

    if(Math.abs(width % 2) == 1){
      width -= 1;
    }

    if(Math.abs(height % 2) == 1){
      height -= 1;
    }

    console.log("height", height);
    console.log("width", width);

    console.log("nodeSizeY", parseInt(height/nodeSizeYScale));
    console.log("nodeSizeX", parseInt(width/nodeSizeXScale));

    // set the dimensions and margins of the diagram
    var margin = {top: 20, right: 90, bottom: 30, left: 90}

    // declares a tree layout and assigns the size
    var treemap = d3.tree()
        .nodeSize([height/nodeSizeYScale, width/nodeSizeXScale]);

    //  assigns the data to a hierarchy using parent-child relationships
    var nodes = d3.hierarchy(treeLayoutData, function(d) {
        return d.children;
      });

    // maps the node data to the tree layout
    nodes = treemap(nodes);

    var svg = d3.select("body").append("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", "0 0 " +width+ " "+height);

    var g = svg.append("g")
          .attr("transform",
                "translate(" + margin.left + "," + height/2 + ")");

    // adds the links between the nodes
    var link = g.selectAll(".link")
        .data( nodes.descendants().slice(1))
      .enter().append("path")
        .attr("class", "link")
        .style("stroke", function(d) { return d.data.level; })
        .attr("d", function(d) {
           return "M" + d.y + "," + d.x
             + "C" + (d.y + d.parent.y) / 2 + "," + d.x
             + " " + (d.y + d.parent.y) / 2 + "," + d.parent.x
             + " " + d.parent.y + "," + d.parent.x;
           });

    // adds each node as a group
    var node = g.selectAll(".node")
        .data(nodes.descendants())
      .enter().append("g")
        .attr("class", function(d) { 
          return "node" + 
            (d.children ? " node--internal" : " node--leaf"); })
        .attr("transform", function(d) { 
          return "translate(" + d.y + "," + d.x + ")"; });

    // adds the circle to the node
    node.append("circle")
      .attr("r", function(d) { return d.data.radius; })
      .style("stroke", function(d) { return d.data.stroke; })
      .style("fill", function(d) { return d.data.color; });
      
    // adds the text to the node
    node.append("text")
      .attr("dy", ".35em")
      .attr("x", function(d) { return d.children ? (d.data.radius + 4) * -1 : d.data.radius + 4 })
      .style("text-anchor", function(d) { 
        return d.children ? "end" : "start"; })
      .text(function(d) { return d.data.name; });

    node.append('text')
    .style('font-family', 'FontAwesome')
    .style('font-size', function(d) { return '1em'} )
    .style('color', '#fff' )
    .text(function(d) { return d.data.icon })
    .attr("transform", function(d) { 
          return "translate(-8,5)"; });

  }

  getTreeData();
});

</script>
</html>